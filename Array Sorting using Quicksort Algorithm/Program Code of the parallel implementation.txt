#include <stdio.h>
#include <omp.h>

void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    #pragma omp parallel for
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            #pragma omp critical
            {
                i++;
                swap(&arr[i], &arr[j]);
            }
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}
void parallel_quick_sort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        #pragma omp task
        parallel_quick_sort(arr, low, pi - 1);
        #pragma omp task
        parallel_quick_sort(arr, pi + 1, high);
    }
}
int main() {
    int my_array[] = {3, 6, 8, 10, 1, 2, 1};
    int n = sizeof(my_array) / sizeof(my_array[0]);
    printf("Original array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", my_array[i]);
    }
    double start_time, end_time;

    // Measure execution time
    start_time = omp_get_wtime();
    
    #pragma omp parallel
    {
        #pragma omp single
        parallel_quick_sort(my_array, 0, n - 1);
    }
    end_time = omp_get_wtime();
    printf("\nSorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", my_array[i]);
    }
    printf("\nExecution Time: %f seconds\n", end_time - start_time);
    return 0;
}
